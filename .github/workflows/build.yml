name: build

on:
  push:
    branches:
      - 'main'
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:
  build-linux:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - { name: Build Runtime Package (linux-x64, none), os: ubuntu-latest, runtime: linux-x64, feature: none }
          - { name: Build Runtime Package (linux-x64, all-lgpl), os: ubuntu-latest, runtime: linux-x64, feature: all-lgpl }
          - { name: Build Runtime Package (linux-x64, all-gpl), os: ubuntu-latest, runtime: linux-x64, feature: all-gpl }
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        source-url: https://pkgs.dev.azure.com/ronaldvanmanen/_packaging/ronaldvanmanen/nuget/v3/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.AZURE_DEVOPS_PAT }}
    - uses: nuget/setup-nuget@v1
      with:
        nuget-version: '6.x'
    - run: sudo apt-get update
      shell: bash
    - run: sudo apt-get install nasm
      shell: bash
    - run: >
        dotnet nuget update source azure
        --username GitHub
        --password ${{ secrets.AZURE_DEVOPS_PAT }}
        --store-password-in-clear-text
      shell: bash
    - run: dotnet tool restore
      shell: bash
    - run: ./scripts/build-runtime.sh --runtime ${{ matrix.platform.runtime }} --feature ${{ matrix.platform.feature }}
      shell: bash
    - uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: |
          ./artifacts/nuget/installed/**/*
          ./artifacts/vcpkg/installed/**/*
        if-no-files-found: error
  build-windows:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
        - { name: Build Runtime Package (win-x64, none), os: windows-latest, runtime: win-x64, feature: none }
        - { name: Build Runtime Package (win-x64, all-lgpl), os: windows-latest, runtime: win-x64, feature: all-lgpl }
        - { name: Build Runtime Package (win-x64, all-gpl), os: windows-latest, runtime: win-x64, feature: all-gpl }
        - { name: Build Runtime Package (win-x86, none), os: windows-latest, runtime: win-x86, feature: none }
        - { name: Build Runtime Package (win-x86, all-lgpl), os: windows-latest, runtime: win-x86, feature: all-lgpl }
        - { name: Build Runtime Package (win-x86, all-gpl), os: windows-latest, runtime: win-x86, feature: all-gpl }
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        source-url: https://pkgs.dev.azure.com/ronaldvanmanen/_packaging/ronaldvanmanen/nuget/v3/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.AZURE_DEVOPS_PAT }}
    - run: >
        dotnet nuget update source azure
        --username GitHub
        --password ${{ secrets.AZURE_DEVOPS_PAT }}
        --store-password-in-clear-text
      shell: cmd
    - run: dotnet tool restore
      shell: cmd
    - run: .\scripts\build-runtime.cmd -runtime ${{ matrix.platform.runtime }} -feature ${{ matrix.platform.feature }}
      shell: cmd
    - uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: |
          .\artifacts\nuget\installed\**\*
          .\artifacts\vcpkg\installed\**\*
        if-no-files-found: error
  build-multiplatform:
    name: ${{ matrix.platform.name }}
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
        - { name: Build Multi-platform Package (none), feature: none }
        - { name: Build Multi-platform Package (all-lgpl), feature: all-lgpl }
        - { name: Build Multi-platform Package (all-gpl), feature: all-gpl }
    needs: [ build-linux, build-windows ]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: actions/download-artifact@v3
      with:
        name: artifacts
        path: ./artifacts
    - uses: nuget/setup-nuget@v1
      with:
        nuget-version: '6.x'
    - run: >
        dotnet nuget update source azure
        --username GitHub
        --password ${{ secrets.AZURE_DEVOPS_PAT }}
        --store-password-in-clear-text
      shell: cmd
    - run: dotnet tool restore
      shell: cmd
    - run: .\scripts\build-multiplatform.cmd -feature ${{ matrix.platform.feature }}
      shell: cmd
    - uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: .\artifacts\nuget\installed\**\*
        if-no-files-found: error
  publish-artifacts-on-azure:
    name: Publish Artifacts on Azure
    runs-on: ubuntu-latest
    needs: [ build-multiplatform ]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifacts
        path: ./artifacts
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        source-url: https://pkgs.dev.azure.com/ronaldvanmanen/_packaging/ronaldvanmanen/nuget/v3/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.AZURE_DEVOPS_PAT }}
    - run: >
        dotnet nuget push "./artifacts/**/*.nupkg"
        --api-key AzureDevOps
        --skip-duplicate
      shell: bash
  publish-artifacts-on-github:
    name: Publish Artifacts on GitHub
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: [ build-multiplatform ]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifacts
        path: ./artifacts
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        source-url: https://nuget.pkg.github.com/ronaldvanmanen/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: >
        dotnet nuget push "./artifacts/**/*.nupkg"
        --source "https://nuget.pkg.github.com/ronaldvanmanen/index.json"
        --api-key ${{ secrets.GITHUB_TOKEN }}
        --skip-duplicate
      shell: bash
