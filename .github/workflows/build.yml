name: build

on:
  push:
    branches:
      - 'main'
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:
  build:
    name: Build (${{ matrix.vcpkg-feature }}, ${{ matrix.vcpkg-triplet }})
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        vcpkg-feature: [ no-deps, all-lgpl, all-gpl ]
        vcpkg-triplet: [ x64-linux-dynamic-release, x64-windows-release, x86-windows-release ]
        include:
          - os: ubuntu
            build: ./build.sh
            vcpkg-triplet: x64-linux-dynamic-release
          - os: windows
            build: .\build.cmd
            vcpkg-triplet: x64-windows-release
          - os: windows
            build: .\build.cmd
            vcpkg-triplet: x86-windows-release
    steps:
    - name: Checkout Git Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Set up DotNet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Set up Vcpkg
      run: >
        ${{ matrix.build }}
        --target setup-vcpkg
    - name: Set up NuGet Source 'azure-vcpkg-binary-cache'
      run: >
        ${{ matrix.build }}
        --target setup-nuget-source
        --nuget-source azure-vcpkg-binary-cache
        --nuget-username GitHub
        --nuget-password ${{ secrets.AZURE_DEVOPS_PAT }}
        --apikey AzureDevOps
        --nuget-configFile ./NuGet.config
    - name: Set up Build Dependencies
      run: >
        ${{ matrix.build }}
        --target setup-build-dependencies
    - name: Build and Install Port Packages
      run: ${{ matrix.build }} --target build --vcpkg-feature ${{ matrix.vcpkg-feature }} --vcpkg-triplet ${{ matrix.vcpkg-triplet }} --vcpkg-binarysource 'clear;nuget,azure-vcpkg-binary-cache,readwrite'
    - name: Zip Port Packages
      run: 7z a ./artifacts/vcpkg/vcpkg-${{ matrix.vcpkg-feature }}-${{ matrix.vcpkg-triplet }}.zip ./artifacts/vcpkg/* -sdel
      if: success() || failure()
    - name: Upload Port Packages
      uses: actions/upload-artifact@v3
      if: success() || failure()
      with:
        name: vcpkg-${{ matrix.vcpkg-feature }}
        path: ./artifacts/vcpkg/vcpkg-${{ matrix.vcpkg-feature }}-${{ matrix.vcpkg-triplet }}.zip
        if-no-files-found: error
  pack:
    name: Pack (${{ matrix.vcpkg-feature }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        vcpkg-feature: [ no-deps, all-lgpl, all-gpl ]
        include:
          - nuget-license: LGPL-2.1-or-later
            vcpkg-feature: no-deps
          - nuget-license: LGPL-2.1-or-later
            vcpkg-feature: all-lgpl
          - nuget-license: GPL-2.0-or-later
            vcpkg-feature: all-gpl
    needs: [ build ]
    steps:
    - name: Checkout Git Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Download Port Packages
      uses: actions/download-artifact@v3
      with:
        name: vcpkg-${{ matrix.vcpkg-feature }}
        path: ./artifacts/vcpkg
    - name: Unzip Port Packages
      run: 7z x './artifacts/vcpkg/vcpkg-${{ matrix.vcpkg-feature }}-*.zip' -o./artifacts/vcpkg/ -y
    - name: Set up DotNet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Build NuGet Packages.
      run: >
        ./build.sh --target pack
        --vcpkg-feature ${{ matrix.vcpkg-feature }}
        --vcpkg-triplet x64-linux-dynamic-release
        --vcpkg-triplet x64-windows-release
        --vcpkg-triplet x86-windows-release
        --nuget-license ${{ matrix.nuget-license }}
      shell: bash
    - name: Upload NuGet Packages
      uses: actions/upload-artifact@v3
      with:
        name: nuget
        path: ./artifacts/nuget/installed/**/*
        if-no-files-found: error
  publish-on-azure:
    name: Publish on Azure
    runs-on: ubuntu-latest
    needs: [ pack ]
    steps:
    - name: Checkout Git Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Download NuGet Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget
        path: ./artifacts/nuget/installed
    - name: Set up DotNet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Set up NuGet Sources 'azure'
      run: >
        ./build.sh
        --target setup-nuget-source
        --nuget-source azure
        --nuget-username GitHub
        --nuget-password ${{ secrets.AZURE_DEVOPS_PAT }}
        --nuget-apikey AzureDevOps
        --nuget-configFile ./NuGet.config
    - name: Push NuGet packages
      run: >
        ./build.sh
        --target publish
        --nuget-source azure
        --nuget-apikey AzureDevOps
      shell: bash
  publish-on-github:
    name: Publish on GitHub
    runs-on: ubuntu-latest
    needs: [ pack ]
    steps:
    - name: Checkout Git Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Download NuGet Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget
        path: ./artifacts/nuget/installed
    - name: Set up DotNet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Push NuGet packages
      run: >
        ./build.sh
        --target publish
        --nuget-source github
        --nuget-apikey ${{ secrets.GITHUB_TOKEN }}
      shell: bash
