name: build

on:
  push:
    branches:
      - 'main'
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:
  build:
    name: Build (${{ matrix.configuration.feature }}, ${{ matrix.configuration.triplet }})
    runs-on: ${{ matrix.configuration.os }}-latest
    strategy:
      matrix:
        configuration:
        - { os: ubuntu, feature: no-deps, triplet: x64-linux-dynamic-release }
        - { os: windows, feature: no-deps, triplet: x64-windows-release }
        - { os: windows, feature: no-deps, triplet: x86-windows-release }
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        source-url: https://pkgs.dev.azure.com/ronaldvanmanen/_packaging/ronaldvanmanen/nuget/v3/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.AZURE_DEVOPS_PAT }}
    - uses: nuget/setup-nuget@v1
      with:
        nuget-version: '6.x'
    - name: Set up Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install nasm
      shell: bash
    - name: Set up NuGet sources
      run: >
        dotnet nuget update source azure
        --username GitHub
        --password ${{ secrets.AZURE_DEVOPS_PAT }}
        --store-password-in-clear-text
    - name: Run build (Linux)
      run: ./build.sh --target build --feature ${{ matrix.configuration.feature }} --triplet ${{ matrix.configuration.triplet }}
      if: runner.os == 'Linux'
      shell: bash
    - name: Run build (Windows)
      run: .\build.cmd --target build --feature ${{ matrix.configuration.feature }} --triplet ${{ matrix.configuration.triplet }}
      if: runner.os == 'Windows'
      shell: cmd
    - name: Run actions/upload-artifact@v3 (on success)
      uses: actions/upload-artifact@v3
      with:
        name: vcpkg
        path: ./artifacts/vcpkg/${{ matrix.configuration.feature }}/${{ matrix.configuration.triplet }}/installed/${{ matrix.configuration.triplet }}/**/*
        if-no-files-found: error
    - name: Run actions/upload-artifact@v3 (on failure)
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: vcpkg-${{ matrix.configuration.feature }}-${{ matrix.configuration.triplet }}
        path: ./artifacts/vcpkg/**/*
        if-no-files-found: error
  pack:
    name: Pack (${{ matrix.feature }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature: [ no-deps ]
    needs: [ build ]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: actions/download-artifact@v3
      with:
        name: vcpkg
        path: ./artifacts/vcpkg
    - uses: nuget/setup-nuget@v1
      with:
        nuget-version: '6.x'
    - name: Set up NuGet sources
      run: >
        dotnet nuget update source azure
        --username GitHub
        --password ${{ secrets.AZURE_DEVOPS_PAT }}
        --store-password-in-clear-text
      shell: bash
    - name: Build NuGet packages.
      run: >
        ./build.sh --target pack
        --feature ${{ matrix.feature }}
        --triplet x64-linux-dynamic-release
        --triplet x64-windows-release
        --triplet x86-windows-release
      shell: bash
    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        path: ./artifacts/nuget/installed/**/*
        if-no-files-found: error
  publish-azure:
    name: Publish on Azure
    runs-on: ubuntu-latest
    needs: [ pack ]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: nuget
        path: ./artifacts/nuget/installed
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        source-url: https://pkgs.dev.azure.com/ronaldvanmanen/_packaging/ronaldvanmanen/nuget/v3/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.AZURE_DEVOPS_PAT }}
    - name: Push NuGet packages
      run: >
        dotnet nuget push "./artifacts/nuget/installed/**/*.nupkg"
        --api-key AzureDevOps
        --skip-duplicate
      shell: bash
  publish-github:
    name: Publish on GitHub
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: [ pack ]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: nuget
        path: ./artifacts/nuget/installed
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        source-url: https://nuget.pkg.github.com/ronaldvanmanen/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Push NuGet packages
      run: >
        dotnet nuget push "./artifacts/nuget/installed/**/*.nupkg"
        --source "https://nuget.pkg.github.com/ronaldvanmanen/index.json"
        --api-key ${{ secrets.GITHUB_TOKEN }}
        --skip-duplicate
      shell: bash
